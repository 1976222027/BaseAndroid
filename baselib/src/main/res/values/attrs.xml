<?xml version="1.0" encoding="utf-8"?>
<resources>
    <declare-styleable name="CommonTitleBar">
        <!-- 标题栏背景 图片或颜色 -->
        <attr name="titleBarColor" format="color" />
        <!-- 填充状态栏 -->
        <attr name="fillStatusBar" format="boolean" />
        <!-- 状态栏颜色 -->
        <attr name="statusBarColor" format="color" />
        <!-- 状态栏模式 -->
        <attr name="statusBarMode" format="enum">
            <enum name="dark" value="0" />
            <enum name="light" value="1" />
        </attr>
        <!-- 标题栏高度 -->
        <attr name="titleBarHeight" format="dimension" />
        <!-- 显示标题栏分割线 -->
        <attr name="showBottomLine" format="boolean" />
        <!-- 标题栏分割线颜色 -->
        <attr name="bottomLineColor" format="color" />
        <!-- 底部阴影高度 showBottomLine = false时有效 -->
        <attr name="bottomShadowHeight" format="dimension" />

        <!-- 左边视图类型 -->
        <attr name="leftType">
            <enum name="none" value="0" />
            <enum name="textView" value="1" />
            <enum name="imageButton" value="2" />
            <enum name="customView" value="3" />
        </attr>
        <!-- TextView 文字, 对应leftType_TextView -->
        <attr name="leftText" format="string" />
        <!-- TextView 颜色, 对应leftType_TextView -->
        <attr name="leftTextColor" format="color" />
        <!-- TextView 字体大小, 对应leftType_TextView -->
        <attr name="leftTextSize" format="dimension" />
        <!-- TextView 左边图片, 对应leftType_TextView -->
        <attr name="leftDrawable" format="reference" />
        <!-- TextView 左边padding, 对应leftType_TextView -->
        <attr name="leftDrawablePadding" format="dimension" />
        <!-- ImageView 资源, 对应leftType_ImageBotton -->
        <attr name="leftImageResource" format="reference" />
        <!-- 左边自定义布局, 对应leftType_CustomView -->
        <attr name="leftCustomView" format="reference" />

        <!-- 右边视图类型 -->
        <attr name="rightType">
            <enum name="none" value="0" />
            <enum name="textView" value="1" />
            <enum name="imageButton" value="2" />
            <enum name="customView" value="3" />
        </attr>
        <!-- TextView 文字, 对应rightType_TextView -->
        <attr name="rightText" format="string" />
        <!-- TextView 颜色, 对应rightType_TextView -->
        <attr name="rightTextColor" format="color" />
        <!-- TextView 字体大小, 对应rightType_TextView -->
        <attr name="rightTextSize" format="dimension" />
        <!-- ImageView 资源, 对应rightType_ImageBotton -->
        <attr name="rightImageResource" format="reference" />
        <!-- 右边自定义布局, 对应rightType_CustomView -->
        <attr name="rightCustomView" format="reference" />

        <!-- 中间视图类型 -->
        <attr name="centerType">
            <enum name="none" value="0" />
            <enum name="textView" value="1" />
            <enum name="searchView" value="2" />
            <enum name="customView" value="3" />
        </attr>
        <attr name="centerSearchRightType">
            <enum name="voice" value="0" />
            <enum name="delete" value="1" />
        </attr>
        <!-- TextView 文字, 对应centerType_TextView -->
        <attr name="centerText" format="string" />
        <!-- TextView 颜色, 对应centerType_TextView -->
        <attr name="centerTextColor" format="color" />
        <!-- TextView 字体大小, 对应centerType_TextView -->
        <attr name="centerTextSize" format="dimension" />
        <!-- TextView 跑马灯效果, 默认打开, 对应centerType_TextView -->
        <attr name="centerTextMarquee" format="boolean" />
        <!-- 子标题TextView 文字, 对应centerType_TextView -->
        <attr name="centerSubText" format="string" />
        <!-- 子标题TextView 颜色, 对应centerType_TextView -->
        <attr name="centerSubTextColor" format="color" />
        <!-- 子标题TextView 字体大小, 对应centerType_TextView -->
        <attr name="centerSubTextSize" format="dimension" />
        <!-- 搜索输入框是否可输入 -->
        <attr name="centerSearchEditable" format="boolean" />
        <!-- 搜索框背景 -->
        <attr name="centerSearchBg" format="reference" />
        <!-- 中间自定义布局, 对应centerType_CustomView -->
        <attr name="centerCustomView" format="reference" />
    </declare-styleable>
    <!--多布局状态改变的view-->
    <declare-styleable name="MultipleStatusView">
        <attr name="loadingView" format="reference"/>
        <attr name="errorView" format="reference"/>
        <attr name="emptyView" format="reference"/>
        <attr name="noNetworkView" format="reference"/>
        <attr name="contentView" format="reference"/>
    </declare-styleable>
    <!--banner-->
    <declare-styleable name="Banner">
        <attr name="delay_time" format="integer" />
        <attr name="scroll_time" format="integer" />
        <attr name="is_auto_play" format="boolean" />
        <attr name="title_background" format="color|reference" />
        <attr name="title_textcolor" format="color" />
        <attr name="title_textsize" format="dimension" />
        <attr name="title_height" format="dimension" />
        <attr name="indicator_width" format="dimension" />
        <attr name="indicator_height" format="dimension" />
        <attr name="indicator_selected_width" format="dimension" />
        <attr name="indicator_selected_height" format="dimension" />
        <attr name="indicator_margin" format="dimension" />
        <attr name="indicator_drawable_selected" format="reference" />
        <attr name="indicator_drawable_unselected" format="reference" />
        <attr name="banner_layout" format="reference"/>
        <attr name="banner_default_image" format="reference"/>
        <attr name="image_scale_type" format="enum">
            <enum name="center" value="0" />
            <enum name="center_crop" value="1" />
            <enum name="center_inside" value="2" />
            <enum name="fit_center" value="3" />
            <enum name="fit_end" value="4" />
            <enum name="fit_start" value="5" />
            <enum name="fit_xy" value="6" />
            <enum name="matrix" value="7" />
        </attr>
        <!--<attr name="indicator_animator" format="reference" />-->
        <!--<attr name="indicator_animator_reverse" format="reference" />-->
    </declare-styleable>
    <!--下面是mvvm相关需要优化-->
    <!-- require boolean value to decide whether requestFocus for view. -->
    <attr name="requestFocus" format="boolean" />
    <!-- require ItemView {@link me.tatarka.bindingcollectionadapter.ItemView} or ItemViewSelector {{@link me.tatarka.bindingcollectionadapter.ItemViewSelector}.} -->
    <attr name="itemView" format="reference" />
    <!-- require List<ViewModel> bind to ItemView to presentation.-->
    <attr name="items" format="reference" />
    <!-- require a adapter which type of BindingRecyclerViewAdapter<T> to AdapterView-->
    <attr name="adapter" format="reference" />

    <attr name="onScrollChangeCommand" format="reference" />
    <attr name="onScrollStateChangedCommand" format="reference" />
    <attr name="url" format="string" />
    <attr name="onTouchCommand" format="reference" />

    <!-- require BindingCommand {@link com.kelin.mvvmlight.command.BindingCommand } to deal with view click event. -->
    <attr name="onClickCommand" format="reference" />
    <attr name="onLongClickCommand" format="reference" />
    <!-- require BindingCommand<Boolean> {@link com.kelin.mvvmlight.command.BindingCommand } to deal with view focus change event.
     BindingCommand would has params which means if view hasFocus.-->
    <attr name="onFocusChangeCommand" format="reference" />
    <attr name="isThrottleFirst" format="boolean" />
    <attr name="currentView" format="reference" />
    <attr name="isVisible" format="boolean" />
    <!-- require boolean value to decide whether requestFocus for view. -->
    <declare-styleable name="View">
        <!-- require BindingCommand {@link com.kelin.mvvmlight.command.BindingCommand } to deal with view click event. -->
        <attr name="onClickCommand" />
        <attr name="onLongClickCommand" />
        <!-- require BindingCommand<Boolean> {@link com.kelin.mvvmlight.command.BindingCommand } to deal with view focus change event.
         BindingCommand would has params which means if view hasFocus.-->
        <attr name="onFocusChangeCommand" />
        <!-- require BindingCommand<MotionEvent> -->
        <attr name="onTouchCommand" />
        <attr name="isThrottleFirst" />
        <attr name="currentView" />

    </declare-styleable>


    <declare-styleable name="AdapterView">
        <!-- require ItemView {@link me.tatarka.bindingcollectionadapter.ItemView} or ItemViewSelector {{@link me.tatarka.bindingcollectionadapter.ItemViewSelector}.} -->
        <attr name="itemView" />
        <!-- require List<ViewModel> bind to ItemView to presentation.-->
        <attr name="items" />
        <!-- require a adapter which type of BindingRecyclerViewAdapter<T> to AdapterView-->
        <attr name="adapter" />
        <attr name="dropDownItemView" format="reference" />
        <attr name="itemIds" format="reference" />
        <attr name="itemIsEnabled" format="reference" />
        <!-- require BindingCommand<Integer> -->
        <attr name="onScrollStateChangedCommand" />
        <!-- require BindingCommand<ListViewScrollDataWrapper> -->
        <attr name="onScrollChangeCommand" />
        <!-- require BindingCommand<Integer> count of list items-->
        <attr name="onLoadMoreCommand" format="reference" />
    </declare-styleable>

    <declare-styleable name="TextView">
        <!--require BindingCommand<TextChangeDataWrapper> -->
        <attr name="beforeTextChangedCommand" format="reference" />
        <!--require BindingCommand<TextChangeDataWrapper> -->
        <attr name="onTextChangedCommand" format="reference" />
        <!--require BindingCommand<String> -->
        <attr name="afterTextChangedCommand" format="reference" />
        <attr name="textChanged" format="reference" />
    </declare-styleable>


    <declare-styleable name="ImageView">
        <!--  load bitmap from uri(string type) -->
        <attr name="url" />
        <!--width for ResizeOptions (use Fresco to load bitmap). -->
        <attr name="request_width" format="integer" />
        <!--height for ResizeOptions (use Fresco to load bitmap). -->
        <attr name="request_height" format="integer" />
        <attr name="placeholderRes" format="reference|color" />
        <!--  require BindingCommand<Bitmap> See {@link @link com.kelin.mvvmlight.command.BindingCommand} -->
        <attr name="onSuccessCommand" format="reference" />
        <!--require BindingCommand<CloseableReference<CloseableImage>> See {@link com.kelin.mvvmlight.command.BindingCommand} -->
        <attr name="onFailureCommand" format="reference" />

    </declare-styleable>


    <declare-styleable name="ViewGroup">
        <!-- require ItemView {@link me.tatarka.bindingcollectionadapter.ItemView} or ItemViewSelector {{@link me.tatarka.bindingcollectionadapter.ItemViewSelector}.} -->
        <attr name="itemView" />
        <!-- require List<ViewModel> bind to ItemView to presentation.-->
        <attr name="observableList" format="reference" />

    </declare-styleable>

    <declare-styleable name="RecyclerView" parent="AdapterView">
        <attr name="lineManager" format="reference" />
        <attr name="itemBinding" format="reference" />
        <attr name="layoutManager" format="reference" />
        <attr name="itemAnimator" format="reference" />
    </declare-styleable>
    <declare-styleable name="RadioGroup">
        <attr name="onCheckedChangedCommand" format="reference" />
    </declare-styleable>

    <declare-styleable name="Spinner">
        <attr name="itemDatas" format="reference" />
        <attr name="valueReply" format="string" />
        <attr name="resource" format="integer" />
        <attr name="dropDownResource" format="integer" />
        <attr name="onItemSelectedCommand" format="reference" />
    </declare-styleable>

    <declare-styleable name="Switch">
        <attr name="onCheckedChangeCommand" format="reference" />
        <attr name="switchState" format="boolean" />
    </declare-styleable>

    <declare-styleable name="ListView" parent="AdapterView">
        <!--require BindingCommand<Integer> integer mean to position where is clicked! -->
        <attr name="onItemClickCommand" format="reference" />
    </declare-styleable>

    <declare-styleable name="ViewPager">
        <!-- require ItemView {@link me.tatarka.bindingcollectionadapter.ItemView} or ItemViewSelector {{@link me.tatarka.bindingcollectionadapter.ItemViewSelector}.} -->
        <attr name="itemView" />
        <!-- require List<ViewModel> bind to ItemView to presentation.-->
        <attr name="items" />
        <!-- require a adapter which type of BindingRecyclerViewAdapter<T> to AdapterView-->
        <attr name="adapter" />
        <!-- require PageTitles<T>-->
        <attr name="pageTitles" format="reference" />
        <!--require BindingCommand<ViewPagerDataWrapper> -->
        <attr name="onPageScrolledCommand" format="reference" />
        <!--require BindingCommand<Integer> -->
        <attr name="onPageSelectedCommand" format="reference" />
        <!--require BindingCommand<Integer> -->
        <attr name="onPageScrollStateChangedCommand" format="reference" />

    </declare-styleable>

    <declare-styleable name="NestedScrollView">
        <!-- require BindingCommand<NestScrollDataWrapper> -->
        <attr name="onScrollChangeCommand" />
    </declare-styleable>

    <declare-styleable name="SimpleDraweeView">
        <!-- require String to load Image"-->
        <attr name="url" />
    </declare-styleable>

    <declare-styleable name="ScrollView">
        <!-- require BindingCommand<ScrollDataWrapper> -->
        <attr name="onScrollChangeCommand" />
    </declare-styleable>

    <declare-styleable name="SwipeRefreshLayout">
        <!-- require BindingCommand -->
        <attr name="onRefreshCommand" format="reference" />
        <attr name="refreshing" format="boolean" />
    </declare-styleable>

    <declare-styleable name="WebView">
        <!-- require String render to html show in webview-->
        <attr name="render" format="string" />
    </declare-styleable>
    <!-- 自定义控制事件分发的LinearLayout -->
    <declare-styleable name="ControlDistributeLinearLayout">
        <attr name="distribute_event" format="boolean" />
    </declare-styleable>
</resources>